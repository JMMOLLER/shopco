---
import Layout from "@layouts/Layout.astro";
import Filters from "@components/Filters.astro";
import { Breadcrumb } from "@components/Breadcrumb";
import { Paginator } from "@components/Paginator";
import { actions } from "astro:actions";
import Icons from "@icons";

const currentPage = parseInt(Astro.url.searchParams.get("page") || "1");
const result = await Astro.callAction(actions.getProducts, {
  page: currentPage,
  size: 12
});
if (!result || result.error) {
  return Astro.redirect(`/404`);
}

const { html, total, ...rest } = result.data;
const pagination = rest as PaginatorType;

const { category } = Astro.params;

export const prerender = false;
---

<Layout
  id="shop"
  title="Shop"
  clientRouter={true}
  className="relative max-w-screen-8xl mx-auto w-full nav:grid nav:grid-cols-[0.5fr_1fr_1fr] nav:grid-rows-[auto_1fr_1fr_1fr_auto] gap-x-5 gap-y-6 px-4 pb-20 pt-6 border-primary border-t"
>
  <!-- BREADCRUMB -->
  <Breadcrumb />

  <!-- ASIDE -->
  <Filters />

  <!-- PRODUCTS CONTENT -->
  <section
    aria-label="main"
    class="col-span-2 row-span-3 row-start-2 max-nav:mt-4"
  >
    <!-- HEADER -->
    <header aria-label="header" class="flex justify-between items-end">
      <h3 class="font-bold text-2xl capitalize">{category || "All"}</h3>
      <div
        class="inline-flex gap-x-3 max-nav:justify-between max-nav:items-center max-nav:w-full max-nav:ml-2 text-primary"
      >
        <p
          class="max-nav:text-sm max-nav:h-fit"
          aria-label="show count of products"
          id="products__info"
        >
          Showing {currentPage}-{rest.totalPages} of {total} Products
        </p>
        <div class="max-nav:hidden" aria-label="sort products">
          <label for="sort">Sort by:</label>
          <select
            id="sort"
            name="sort"
            class="bg-transparent pr-8 font-medium text-black text-center cursor-pointer"
            aria-label="Sort products"
          >
            <option value="newest">Newest</option>
            <option value="price" selected>Most Popular</option>
          </select>
        </div>
        <button
          role="button"
          id="filter__toggle"
          aria-label="Toggle filter"
          class="bg-primary rounded-full p-1.5 h-fit nav:hidden"
        >
          <Icons.Filter />
        </button>
      </div>
    </header>

    <!-- CONTENEDOR DE LOS PRODUCTOS -->
    <div
      id="products__container"
      class="grid gap-5 grid-cols-[repeat(auto-fit,minmax(234px,1fr))]"
      aria-labelledby="products__info"
      role="region"
    >
      <!-- LOADER -->
      <span
        id="products__loader"
        class="mx-auto loading loading-infinity loading-lg hidden"
        aria-label="Loading products"
        aria-live="polite"
        role="status"
      >
      </span>

      <!-- LISTA DE PRODUCTOS -->
      <Fragment set:html={html} />
    </div>
  </section>

  <Paginator {...pagination} />
</Layout>

<script>
  import { actions, isActionError, isInputError } from "astro:actions";
  import { $isFilterOpen } from "@stores/shopStore";

  document.addEventListener("astro:page-load", () => {
    // Evitar que el script se ejecute en otras páginas
    // esto sucede cuando se usa client-side navigation
    if (!document.querySelector("main#shop")) return;

    // ===================== EVENTOS ===================== //

    /**
     * @description Evento personalizado definido en `Paginator.astro`
     */
    document.addEventListener("paginate", (event) => {
      const e = event as CustomEvent<{ page: number; popState: boolean }>;
      fetchProducts(e.detail.page, e.detail.popState);
    });

    const container = document.getElementById("products__container")!;
    const btnFilter = document.getElementById("filter__toggle")!;
    const loader = document.getElementById("products__loader")!;
    const info = document.getElementById("products__info")!;

    btnFilter.addEventListener("click", () => {
      $isFilterOpen.set(true);
    });

    // ===================== FUNCIONES ===================== //

    type IsLoadingProps = {
      isLoading?: boolean;
      beforeEnd?: (loader: HTMLElement) => void;
      afterEnd?: (loader: HTMLElement) => void;
    };

    function isLoading(props: IsLoadingProps) {
      const { isLoading = true, beforeEnd, afterEnd } = props;

      afterEnd && afterEnd(loader);

      if (isLoading) {
        container.classList.replace("grid", "flex");
        container.classList.add("h-full");
        loader.classList.remove("hidden");
      } else {
        container.classList.replace("flex", "grid");
        container.classList.remove("h-full");
        loader.classList.add("hidden");
      }

      beforeEnd && beforeEnd(loader);
    }

    async function fetchProducts(page: number, isPopState = false) {
      // Scroll al inicio de la página
      window.scrollTo({ top: 0, behavior: "smooth" });
      // Esperar a que la página se desplace al inicio
      await new Promise((resolve) => setTimeout(resolve, 200));

      // Mostrar el loader y limpiar los productos actuales
      isLoading({
        afterEnd: (loader) => {
          Array.from(container.childNodes).forEach((node) => {
            if ((node as HTMLElement).id !== loader.id) node.remove();
          });
        }
      });

      // Obtener los productos de la página seleccionada
      const { data, error } = await actions.getProducts({ page, size: 12 });
      !isPopState && window.history.pushState({}, "", `?page=${page}`);
      // Manejar errores de la petición
      if (isActionError(error)) alert(error.message);
      else if (isInputError(data)) alert(data.message);

      // Insertar los productos en el contenedor
      isLoading({
        isLoading: false,
        beforeEnd: (loader) => {
          loader.insertAdjacentHTML("afterend", data!.html);
          info.textContent = `Showing ${page}-${data!.totalPages} of ${data!.total} Products`;
        }
      });
    }
  });
</script>
