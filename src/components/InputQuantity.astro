---
import { uuidv7 } from "uuidv7";

interface QuantityInputProps {
  defaultValue?: string;
  itemClass?: string;
  class?: string;
  max?: string;
  min?: string;
  id?: string;
}

const { class: className, itemClass, id } = Astro.props as QuantityInputProps;
---

<quantity-input
  class:list={["bg-primary rounded-full h-full text-2xl px-3 py-2", className]}
  data-component-id={uuidv7()}
>
  <label for="quantity" class="sr-only"> Quantity </label>
  <div class="flex items-center gap-2">
    <button
      type="button"
      class="min-w-5 text-black"
      aria-label="Decrease quantity"
    >
      -
    </button>
    <input
      id={id}
      type="number"
      autocomplete="off"
      name={id || "quantity"}
      class:list={[
        "text-center bg-transparent rounded-md text-base",
        itemClass
      ]}
      value={Astro.props.defaultValue || "1"}
      max={Astro.props.max || "99"}
      min={Astro.props.min || "1"}
      aria-label="Quantity"
    />
    <button
      type="button"
      class="min-w-5 text-black"
      aria-label="Increase quantity"
    >
      +
    </button>
  </div>
</quantity-input>

<style>
  /* Chrome, Safari, Edge, Opera */
  input::-webkit-outer-spin-button,
  input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  /* Firefox */
  input[type="number"] {
    -moz-appearance: textfield;
  }
</style>

<script>
  class QuantityInput extends HTMLElement {
    quantity: HTMLInputElement;
    decrease: HTMLButtonElement;
    increase: HTMLButtonElement;

    constructor() {
      super();
      // Inicializar los elementos
      this.quantity = this.querySelector("input") as HTMLInputElement;
      this.decrease = this.quantity.previousElementSibling as HTMLButtonElement;
      this.increase = this.quantity.nextElementSibling as HTMLButtonElement;
    }

    connectedCallback() {
      this.decrease.addEventListener("click", () => {
        if (this.getCurrentValue() <= this.getMin()) return;
        if (this.getCurrentValue() > 1) {
          this.quantity.value = String(this.getCurrentValue() - 1);
        }
      });

      this.increase.addEventListener("click", () => {
        if (this.getCurrentValue() >= this.getMax()) return;
        this.quantity.value = String(this.getCurrentValue() + 1);
      });

      this.quantity.addEventListener("change", () => {
        if (Number(this.getCurrentValue()) > this.getMax()) {
          this.quantity.value = String(this.getMax());
        } else if (Number(this.getCurrentValue()) < this.getMin()) {
          this.quantity.value = String(this.getMin());
        }
      });
    }

    getCurrentValue() {
      return Number(this.quantity.value);
    }

    getMax() {
      return Number(this.quantity.max);
    }

    getMin() {
      return Number(this.quantity.min);
    }
  }

  customElements.define("quantity-input", QuantityInput);
</script>
